name: Backend CI/CD

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  PROJECT_NAME: notes
  ENVIRONMENT: prod
  SSM_PARAMETER_PATH: /notes/notes/prod
  CONTAINER_NAME: backend

jobs:
  # test:
  #   name: Test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10'
  #         cache: 'pip'

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install pytest pytest-cov

  #     - name: Run tests
  #       run: |
  #         chmod +x run_tests.sh
  #         ./run_tests.sh

  deploy:
    name: Build and Deploy
    # needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # ðŸ”¥ required for OIDC
      contents: read    # required for actions/checkout

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure AWS credentials using OIDC authentication
      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: "arn:aws:iam::587294124303:role/notes-prod-github-actions-role"
          aws-region: ${{ env.AWS_REGION }}

      # Debug AWS identity (to verify credentials are loaded correctly)
      - name: Debug AWS identity
        run: aws sts get-caller-identity

      - name: Get SSM Parameters
        id: ssm
        run: |
          echo "Getting SSM parameters for deployment..."
          echo "ECR_REPOSITORY=$(aws ssm get-parameter --name ${SSM_PARAMETER_PATH}/backend_ecr_repository_url --query Parameter.Value --output text)" >> $GITHUB_ENV
          echo "ECS_CLUSTER=$(aws ssm get-parameter --name ${SSM_PARAMETER_PATH}/ecs_cluster_name --query Parameter.Value --output text)" >> $GITHUB_ENV
          echo "ECS_SERVICE=$(aws ssm get-parameter --name ${SSM_PARAMETER_PATH}/backend_service_name --query Parameter.Value --output text)" >> $GITHUB_ENV
          echo "TASK_EXECUTION_ROLE=$(aws ssm get-parameter --name ${SSM_PARAMETER_PATH}/task_execution_role_arn --query Parameter.Value --output text)" >> $GITHUB_ENV
          echo "TASK_ROLE=$(aws ssm get-parameter --name ${SSM_PARAMETER_PATH}/task_role_arn --query Parameter.Value --output text)" >> $GITHUB_ENV
          echo "DB_SECRET_ARN=$(aws ssm get-parameter --name ${SSM_PARAMETER_PATH}/db_secret_arn --query Parameter.Value --output text)" >> $GITHUB_ENV
          echo "PRIVATE_SUBNET_IDS=$(aws ssm get-parameter --name ${SSM_PARAMETER_PATH}/private_subnet_ids --query Parameter.Value --output text)" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition --task-definition ${PROJECT_NAME}-${ENVIRONMENT}-backend \
            --query taskDefinition > task-definition.json

      - name: Update task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Get security group for ECS tasks
        run: |
          SECURITY_GROUP_ID=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].networkConfiguration.awsvpcConfiguration.securityGroups[0]' --output text)
          echo "SECURITY_GROUP_ID=$SECURITY_GROUP_ID" >> $GITHUB_ENV
          
      - name: Run database migrations
        run: |
          # Convert comma-separated subnet IDs to proper format for AWS CLI
          SUBNET_LIST=$(echo $PRIVATE_SUBNET_IDS | sed 's/,/","/g')
          
          aws ecs run-task \
            --cluster ${{ env.ECS_CLUSTER }} \
            --task-definition ${{ steps.task-def.outputs.task-definition }} \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[\"$SUBNET_LIST\"],securityGroups=[\"$SECURITY_GROUP_ID\"],assignPublicIp=DISABLED}" \
            --overrides '{"containerOverrides": [{"name":"backend","command": ["alembic", "upgrade", "head"]}]}' \
            --wait
