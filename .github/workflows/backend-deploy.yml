name: Backend Deployment Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/backend-deploy.yml'

env:
  AWS_REGION: us-east-1  # Change to your AWS region
  ECR_REPOSITORY: notes-backend  # Change to your ECR repository name
  EKS_CLUSTER_NAME: notes-cluster  # Change to your EKS cluster name
  NAMESPACE: backend  # Change to your Kubernetes namespace

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest  # For running tests

      - name: Run tests
        run: |
          chmod +x run_tests.sh
          ./run_tests.sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Image Tag
        id: set-image-tag
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHA_SHORT=$(git rev-parse --short HEAD)
          echo "IMAGE_TAG=${TIMESTAMP}-${SHA_SHORT}" >> $GITHUB_ENV
          echo "::set-output name=image_tag::${TIMESTAMP}-${SHA_SHORT}"

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      
      - name: Deploy to EKS
        run: |
          # Update deployment manifest with new image
          sed -i "s|image:.*|image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}|" kubernetes/deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f kubernetes/deployment.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f kubernetes/service.yaml -n ${{ env.NAMESPACE }}
      
      - name: Verify deployment
        run: |
          echo "Waiting for deployment to complete..."
          kubectl rollout status deployment/notes-backend-deployment -n ${{ env.NAMESPACE }} --timeout=180s
          
          # Get deployment status
          DEPLOYMENT_STATUS=$(kubectl get deployment notes-backend-deployment -n ${{ env.NAMESPACE }} -o jsonpath='{.status.conditions[?(@.type=="Available")].status}')
          
          if [ "$DEPLOYMENT_STATUS" == "True" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üîç Checking service..."
            kubectl get service notes-backend-service -n ${{ env.NAMESPACE }}
          else
            echo "‚ùå Deployment failed!"
            kubectl get pods -n ${{ env.NAMESPACE }} -l app=notes-backend
            kubectl describe deployment notes-backend-deployment -n ${{ env.NAMESPACE }}
            exit 1
          fi